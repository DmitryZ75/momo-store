cache:
  paths:
    - ${CI_PROJECT_DIR}/.m2/repository

variables:
   VERSION: 1.0.${CI_PIPELINE_ID}
   SPRING_CLOUD_VAULT_ENABLED: "false"
   
stages:
  - build
  - test
  - build_image
  - release
  - deploy-image

include:
  - project: 'templates/ci'

#проводим тесты

sonarqube-backend-sast:
  variables:
    compile: "true"
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.m2/backend"  
    GIT_DEPTH: "0"  
  stage: test
  only:
    changes:
      - application/backend/*
  image: sonarsource/sonar-scanner-cli:latest
  script:
    - cd application/backend
    - sonar-scanner
      -Dsonar.projectKey=${SONAR_PROJECT_KEY_BACKEND}
      -Dsonar.host.url=${SONARQUBE_URL}
      -Dsonar.login=${SONAR_LOGIN_BACKEND}
      -Dsonar.projectName=${SONAR_PROJECT_NAME_BACKEND}
  needs:
    - build-backend

golang-test:
  image:
    name: golang:1.18.3
    entrypoint: [""]  
  stage: test
  script:
    - cd application/backend
    - go test -v ./...        
  rules:
    - changes:
        - application/backend/**/*

# собираем приложение, и сохраняем ID артефактов

build-backend:
  image:
    name: golang:1.18.3
    entrypoint: [""]  
  stage: build
  script:
    - echo "ARTIFACT_JOB_ID=${CI_JOB_ID}" > CI_JOB_ID.txt 
    - cd application/backend
    - ls
    - go build ./cmd/api
    - cd ../.. 
    - mkdir momo-${VERSION}
    - mv application/backend/api momo-${VERSION}/momo-backend-${VERSION} 
    - cd momo-${VERSION}
    - ls
    - du -sh momo-backend-${VERSION}
  artifacts:
    paths:
      - momo-${VERSION}/momo-backend-${VERSION} 
    reports:
        dotenv: CI_JOB_ID.txt 
  rules:
    - changes:
        - application/backend/**/*

# копируем архив приложения в nexus

upload-release:
   stage: release
   script:
      - apt install -y tar
      - >
         cd momo-${VERSION}
      - >
         tar -czvf momo-backend-${VERSION}.tar.gz momo-backend-${VERSION}
      - >
         curl -v -u "${NEXUS_REPO_USER}:${NEXUS_REPO_PASS}" --upload-file momo-backend-${VERSION}.tar.gz ${NEXUS_REPO_URL_BACK}/${VERSION}/momo-backend-${VERSION}.tar.gz
   rules:
      - changes:
           - application/backend/**/*

# готовим образ приожения

build-backend-image:
  stage: build_image
  image: docker:20.10.12-dind-rootless
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - cd application/backend
    - >
      docker build
      --build-arg VERSION=$VERSION
      --tag $CI_REGISTRY_IMAGE/momo-backend:$CI_COMMIT_SHA
      -f Dockerfile
      .
    - docker push $CI_REGISTRY_IMAGE/momo-backend:$CI_COMMIT_SHA


# публикуем образ в container registry

upload-backend-image:
  stage: deploy-image
  variables:
    GIT_STRATEGY: none
  image: docker:20.10.12-dind-rootless
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE/momo-backend:$CI_COMMIT_SHA
    - docker tag $CI_REGISTRY_IMAGE/momo-backend:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE/momo-backend:latest
    - docker push $CI_REGISTRY_IMAGE/momo-backend:latest